#! /bin/bash

# check if root
if [[ $EUID -ne 0 ]]; then
   echo $"This script must be run as root" 1>&2
   exit 1
fi

# include the config
OSTMU_FOLDER="/opt/ostmu"
source "${OSTMU_FOLDER}/etc/config"

# define some vars
user_name=$1
sim_name=$2
user_port="0"
sim_port="0"
user_config_folder_path="/home/${user_name}/${USER_CONFIG_FOLDER_NAME}"
db_password=`date | md5sum | cut -c1-8`

show_help() {
  echo $"Usage : create_sim <user_name> <sim_name>"
  exit;
}

add_file() {
  cat "${OSTMU_INI_MODELS_FOLDER}/$1" | \
  sed -e 's/<\[user_name\]>/'${user_name}'/g' \
  -e 's/<\[grid_ip\]>/'${OPENSIMULATOR_GRID_IP}'/g' \
  -e 's/<\[db_password\]>/'${db_password}'/g' \
  -e 's/<\[sim_name\]>/'${sim_name}'/g' \
  -e 's/<\[sim_port\]>/'${sim_port}'/g' > $2
}

get_next_available_user_port() {
  # remove empty lines in file
  sed -i '/^$/d' "${OSTMU_PORTS_FILE}"
  # count lines
  users_qty=$(wc -l < "${OSTMU_PORTS_FILE}")
  next_user_nbr=$((${users_qty} + 1))
  if [ ${next_user_nbr} -lt 10 ];then
    user_port="10${next_user_nbr}00"
  else
    if [ ${next_user_nbr} -gt 99 ];then
      user_port=$((${next_user_nbr} + 100))"00"
    else
      user_port="1${next_user_nbr}00"
    fi
  fi
  echo "${user_name};${user_port}" >> "${OSTMU_PORTS_FILE}"
}

create_sim_files() {
  # count user sim folders
  sim_files_qty=$(find ${user_config_folder_path} -type d -name "*.sim" | wc -l)
  if [ ${sim_files_qty} -gt 9 ];then
    echo -e ${SymbolNotOk} $"10 sims maximum per user."
    exit;
  fi
  # get the user port
  user_port_line=$(grep "^${user_name}" "${OSTMU_PORTS_FILE}")
  if [ "${user_port_line}" ];then
    # get the user port
    user_port=$(echo "${user_port_line}" | cut -d ";" -f2)
  else
    get_next_available_user_port
  fi
  # define sim port
  if [ ${sim_files_qty} = 0 ];then
    sim_port=${user_port}
  else
    sim_port=$((${user_port} + $((${sim_files_qty} * 10))))
  fi
  # add root files
  mkdir -p "$1"
  add_file "OpenSim.exe.config" "$1/OpenSim.exe.config"
  add_file "OpenSim.ini" "$1/OpenSim.ini"
  # config-include
  mkdir -p "$1/config-include"
  add_file "GridCommon.ini" "$1/config-include/GridCommon.ini"
  add_file "GridHypergrid.ini" "$1/config-include/GridHypergrid.ini"
  # log
  mkdir -p "$1/log"
  # temp
  mkdir -p "$1/temp"
  # regions
  mkdir -p "$1/regions"
  add_file "Regions.ini" "$1/regions/Regions.ini"
  # change ownership
  chown -R "${user_name}":"${user_name}" "$1"
}

# begin of logic
if [ $# -lt 2 ];then
  show_help
  exit;
fi

# check if the user exists
if user_exists ${user_name} > /dev/null; then
  echo -e ${SymbolOk} $"The user ${user_name} exists."
else
  echo -e ${SymbolNotOk} $"The user ${user_name} does not exist."
  exit 1;
fi

# check for the config folder
if [ ! -d "/var/lib/ostmu" ]; then
  mkdir -p "/var/lib/ostmu"
  if [ ! $? -eq 0 ]; then
    exit 1;
  else
    echo -e ${SymbolPlus} $"The folder /var/lib/ostmu was created."
  fi
else
  echo -e ${SymbolOk} $"The folder /var/lib/ostmu exists."
fi

# check if the port file exists and if not, create it
if [ ! -f ${OSTMU_PORTS_FILE} ]; then
  touch "${OSTMU_PORTS_FILE}"
  if [ ! $? -eq 0 ]; then
    exit 1;
  else
    echo -e ${SymbolPlus} $"The file ${OSTMU_PORTS_FILE} was created."
  fi
else
  echo -e ${SymbolOk} $"The file ${OSTMU_PORTS_FILE} exists."
fi

# check if the ports file is writable
if [ ! -w ${OSTMU_PORTS_FILE} ]; then
  echo -e ${SymbolOk} $"The ports file is not writable"
  exit 1;
fi

# check if the user config folder exists and if not, create it.
if [ ! -d "${user_config_folder_path}" ];then
  mkdir -p "${user_config_folder_path}"
  if [ ! $? -eq 0 ]; then
    exit 1;
  else
    echo -e ${SymbolPlus} $"The folder ${user_config_folder_path} was created."
  fi
  chown "${user_name}":"${user_name}" "${user_config_folder_path}"
  if [ ! $? -eq 0 ]; then
    exit 1;
  else
    echo -e ${SymbolPlus} $"The ownership of the folder ${user_config_folder_path} was set to ${user_name}":"${user_name}."
  fi
else
  echo -e ${SymbolOk} $"The folder ${user_config_folder_path} exists."
fi

if [ ${USE_MYSQL} == 1 ]; then
  # check if the db password file exit and if not, create it
  if [ -f "${user_config_folder_path}/db_pass" ];then
    db_password=`cat ${user_config_folder_path}/db_pass`
  else
    echo ${db_password} > "${user_config_folder_path}/db_pass"
    if [ ! $? -eq 0 ]; then
      exit 1;
    else
      echo -e ${SymbolPlus} $"The file ${user_config_folder_path}/db_pass was created."
    fi
    chown "${user_name}":"${user_name}" "${user_config_folder_path}/db_pass"
    if [ ! $? -eq 0 ]; then
      exit 1;
    else
      echo -e ${SymbolOk} $"The ownership of the file ${user_config_folder_path}/db_pass was set to ${user_name}":"${user_name}."
    fi
  fi

  # load the mysql functions file
  source "${OSTMU_FOLDER}/includes/mysql"

  # check if the user exists in the database
  mysql_check_if_user_exists ${user_name};
  if [ $? -eq 0 ]; then
    mysql_create_user ${user_name} ${db_password}
    echo -e ${SymbolPlus} $"The user ${user_name} was created in the database."
  else
    echo -e ${SymbolOk} $"The user ${user_name} exists in the database."
  fi

  # create the database
  mysql_create_database ${user_name} "sim_${user_name}_${sim_name}"
fi

# check if the simulator folder exists and if not, create it
sim_folder="${user_config_folder_path}/${sim_name}.sim"
if [ ! -d "${sim_folder}" ];then
  create_sim_files "${sim_folder}"
  echo -e ${SymbolPlus} $"The folder ${sim_folder} was created."
else
  echo -e ${SymbolOk} $"The folder ${sim_folder} exists."
fi

# check if tmux user folder exists and if not, create it
tmux_user_folder="${TMUX_SOCKET_FOLDER}/${user_name}"
if [ ! -d "${tmux_user_folder}" ];then
  mkdir -p "${tmux_user_folder}"
  if [ ! $? -eq 0 ]; then
    exit 1;
  else
    echo -e ${SymbolPlus} $"The tmux user folder was created."
  fi
else
  echo -e ${SymbolOk} $"The tmux user folder exists."
fi
