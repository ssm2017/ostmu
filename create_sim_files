#! /bin/bash

# check if root
if [[ $EUID -ne 0 ]]; then
   echo $"This script must be run as root" 1>&2
   exit 1
fi

# check if params
if [ $# -lt 2 ];then
  echo $"Usage : create_sim <USER_NAME> <SIM_NAME>"
  exit;
fi

# ======================
#         config
# ======================
# check if the config file exists
if [ ! -f "/etc/ostmu/ostmu.conf" ]; then
  echo $"/etc/ostmu/ostmu.conf file not found."
  exit 1;
fi

# include the config
source "/etc/ostmu/ostmu.conf"

# lang
TEXTDOMAIN=ostmu
TEXTDOMAINDIR="${OSTMU_FOLDER}/locale"

# user
USER_HOME=$(eval echo ~${SUDO_USER})
#user_config_folder_path="${USER_HOME}"/"${USER_CONFIG_FOLDER_NAME}"

# include the colors declarations
source "${OSTMU_FOLDER}/includes/theme"

# include functions files
source "${OSTMU_FOLDER}/includes/sys"
source "${OSTMU_FOLDER}/includes/users"
source "${OSTMU_FOLDER}/includes/tmux"
source "${OSTMU_FOLDER}/includes/sims"

# define some vars
USER_NAME=$1
SIM_NAME=$2
user_port="0"
SIM_PORT="0"
user_config_folder_path="/home/${USER_NAME}/${USER_CONFIG_FOLDER_NAME}"
SIM_FOLDER="${user_config_folder_path}/${SIM_NAME}.sim"
DB_PASSWORD=`date | md5sum | cut -c1-8`
OSTMU_PORTS_FILE="/var/lib/ostmu/ports"

# ======================
#       functions
# ======================
add_file() {
  eval "echo \"$(cat $1)\"" > $2
}

get_next_available_user_port() {
  # remove empty lines in file
  sed -i '/^$/d' "${OSTMU_PORTS_FILE}"
  # count lines
  users_qty=$(wc -l < "${OSTMU_PORTS_FILE}")
  next_user_nbr=$((${users_qty} + 1))
  if [ ${next_user_nbr} -lt 10 ];then
    user_port="10${next_user_nbr}00"
  else
    if [ ${next_user_nbr} -gt 99 ];then
      user_port=$((${next_user_nbr} + 100))"00"
    else
      user_port="1${next_user_nbr}00"
    fi
  fi
  echo "${USER_NAME};${user_port}" >> "${OSTMU_PORTS_FILE}"
}

# ======================
#         checks
# ======================
# check if the user exists
if user_exists ${USER_NAME} > /dev/null; then
  echo -e ${SymbolOk} $"The user ${USER_NAME} exists."
else
  echo -e ${SymbolNotOk} $"The user ${USER_NAME} does not exist."
  exit 1;
fi

# count user sim folders
sim_files_qty=$(find ${user_config_folder_path} -type d -name "*.sim" | wc -l)
if [ ${sim_files_qty} -gt 9 ];then
  echo -e ${SymbolNotOk} $"10 sims maximum per user."
  exit;
fi

# check for the config folder
if [ ! -d "/var/lib/ostmu" ]; then
  mkdir -p "/var/lib/ostmu"
  if [ ! $? -eq 0 ]; then
    exit 1;
  else
    echo -e ${SymbolPlus} $"The folder /var/lib/ostmu was created."
  fi
else
  echo -e ${SymbolOk} $"The folder /var/lib/ostmu exists."
fi

# check if the port file exists and if not, create it
if [ ! -f ${OSTMU_PORTS_FILE} ]; then
  touch "${OSTMU_PORTS_FILE}"
  if [ ! $? -eq 0 ]; then
    exit 1;
  else
    echo -e ${SymbolPlus} $"The file ${OSTMU_PORTS_FILE} was created."
  fi
else
  echo -e ${SymbolOk} $"The file ${OSTMU_PORTS_FILE} exists."
fi

# check if the ports file is writable
if [ ! -w ${OSTMU_PORTS_FILE} ]; then
  echo -e ${SymbolNotOk} $"The ports file is not writable"
  exit 1;
else
  echo -e ${SymbolOk} $"The ports file is writable"
fi

# check if the user config folder exists and if not, create it.
if [ ! -d "${user_config_folder_path}" ];then
  mkdir -p "${user_config_folder_path}"
  if [ ! $? -eq 0 ]; then
    exit 1;
  else
    echo -e ${SymbolPlus} $"The folder ${user_config_folder_path} was created."
  fi
  chown "${USER_NAME}":"${USER_NAME}" "${user_config_folder_path}"
  if [ ! $? -eq 0 ]; then
    exit 1;
  else
    echo -e ${SymbolPlus} $"The ownership of the folder ${user_config_folder_path} was set to ${USER_NAME}":"${USER_NAME}."
  fi
else
  echo -e ${SymbolOk} $"The folder ${user_config_folder_path} exists."
fi

# check if we will use mysql
USE_MYSQL=0
echo -e ${ColYellowF}$"Do you want to use mysql ?" ${ColReset}
echo $"Enter y or n :"
read use_mysql_answer
if [ "$use_mysql_answer" == "y" ]; then
  USE_MYSQL=1
fi

# ======================
#         mysql
# ======================
if [ ${USE_MYSQL} == 1 ]; then
  # check if the db password file exit and if not, create it
  if [ -f "${user_config_folder_path}/db_pass" ];then
    DB_PASSWORD=`cat ${user_config_folder_path}/db_pass`
  else
    echo ${DB_PASSWORD} > "${user_config_folder_path}/db_pass"
    if [ ! $? -eq 0 ]; then
      exit 1;
    else
      echo -e ${SymbolPlus} $"The file ${user_config_folder_path}/db_pass was created."
    fi
    chown "${USER_NAME}":"${USER_NAME}" "${user_config_folder_path}/db_pass"
    if [ ! $? -eq 0 ]; then
      exit 1;
    else
      echo -e ${SymbolOk} $"The ownership of the file ${user_config_folder_path}/db_pass was set to ${USER_NAME}":"${USER_NAME}."
    fi
    chmod 600 "${user_config_folder_path}/db_pass"
    if [ ! $? -eq 0 ]; then
      exit 1;
    else
      echo -e ${SymbolOk} $"The permissions of the file ${user_config_folder_path}/db_pass were set to 600."
    fi
  fi

  # load the mysql functions file
  source "${OSTMU_FOLDER}/includes/mysql"

  # check if the root user can access the database
  if ! mysql -e ";" > /dev/null 2>&1; then
    echo -e ${SymbolNotOk} $"The root user can not access the database."
    exit 1;
  fi

  # check if the user exists in the database
  mysql_check_if_user_exists ${USER_NAME};
  if [ $? -eq 0 ]; then
    mysql_create_user ${USER_NAME} ${DB_PASSWORD}
    echo -e ${SymbolPlus} $"The user ${USER_NAME} was created in the database."
  else
    echo -e ${SymbolOk} $"The user ${USER_NAME} exists in the database."
  fi

  # create the database
  mysql_create_database ${USER_NAME} "sim_${USER_NAME}_${SIM_NAME}"

  # define the mysql OpenSim.ini string
  DATABASE_STRING="StorageProvider = OpenSim.Data.MySQL.dll
ConnectionString = \"Data Source=localhost;Database=sim_${USER_NAME}_${SIM_NAME};User ID=${USER_NAME};Password=${DB_PASSWORD};Old Guids=true;\""
else
  DATABASE_STRING="Include-Storage = \"${SIM_FOLDER}/config-include/storage/SQLiteStandalone.ini;\""
fi

# ======================
#       grid type
# ======================
# get the grid type
grid_type_name="default"
declare -a grid_types=()
cd "/etc/ostmu/models/grids"
for i in *.grid;do
  if [ -d $i ]; then
    fullname=$(basename "$i")
    #~ extension="${fullname##*.}"
    shortname="${fullname%.*}"
    grid_types=("${grid_types[@]}" "${shortname}")
  fi
done
echo $"available grids :"
i=0
for grid_type in "${grid_types[@]}"; do
  i=$((i+1))
  echo "$i/ ${grid_type}"
done

# ask the user
echo -e ${ColYellowF} $"What grid do you want to use ?" ${ColReset}
echo $"Enter a number :"
read grid_number
if ! [[ "$grid_number" =~ ^[0-9]+$ ]] ; then
  echo -e ${SymbolNotOk} $"Wrong answer. Good bye."
  exit 1;
fi
if [ "$grid_number" -eq 0 ]; then
  echo -e ${SymbolNotOk} $"Wrong answer. Good bye."
  exit 1;
fi
if [[ "${grid_types[($grid_number - 1)]}" ]]; then
  grid_type_name=${grid_types[($grid_number - 1)]}
else
  echo -e ${SymbolNotOk} $"Wrong answer. Good bye."
  exit 1;
fi

# ask for the grid ip
GRID_IP="localhost"
if [ ${grid_type_name} != "standalone" ];then
  echo -e ${ColYellowF} $"What is the grid hostname (or IP) ?" ${ColReset}
  echo $"Enter a hostname or an IP. Default is localhost"
  read grid_hostname_answer
  if [ "${grid_hostname_answer}" != "" ];then
    GRID_IP=${grid_hostname_answer}
  fi
fi

# ======================
#      write files
# ======================
# check if the simulator folder exists and if not, create it
if [ ! -d "${SIM_FOLDER}" ];then

  # get the user port
  user_port_line=$(grep "^${USER_NAME}" "${OSTMU_PORTS_FILE}")
  if [ "${user_port_line}" ];then
    user_port=$(echo "${user_port_line}" | cut -d ";" -f2)
  else
    get_next_available_user_port
  fi

  # define sim port
  if [ ${sim_files_qty} = 0 ];then
    SIM_PORT=${user_port}
  else
    SIM_PORT=$((${user_port} + $((${sim_files_qty} * 10))))
  fi

  # config-include
  mkdir -p "${SIM_FOLDER}/config-include"
  add_file "/etc/ostmu/models/sims/config-include/FlotsamCache.ini" "${SIM_FOLDER}/config-include/FlotsamCache.ini"
  if [ ${grid_type_name} == "standalone" ];then
    ARCHITECTURE="${SIM_FOLDER}/config-include/StandaloneHypergrid.ini"
    add_file "/etc/ostmu/models/grids/standalone.grid/StandaloneCommon.ini" "${SIM_FOLDER}/config-include/StandaloneCommon.ini"
    add_file "/etc/ostmu/models/sims/config-include/StandaloneHypergrid.ini" "${SIM_FOLDER}/config-include/StandaloneHypergrid.ini"
  else
    ARCHITECTURE="${SIM_FOLDER}/config-include/GridHypergrid.ini"
    add_file "/etc/ostmu/models/grids/${grid_type_name}.grid/GridCommon.ini" "${SIM_FOLDER}/config-include/GridCommon.ini"
    add_file "/etc/ostmu/models/sims/config-include/GridHypergrid.ini" "${SIM_FOLDER}/config-include/GridHypergrid.ini"
  fi

  # add root files
  mkdir -p "${SIM_FOLDER}"
  add_file "/etc/ostmu/models/sims/OpenSim.exe.config" "${SIM_FOLDER}/OpenSim.exe.config"
  add_file "/etc/ostmu/models/sims/OpenSim.ini" "${SIM_FOLDER}/OpenSim.ini"

  # empty folders
  mkdir -p "${SIM_FOLDER}/log"
  mkdir -p "${SIM_FOLDER}/temp"
  mkdir -p "${SIM_FOLDER}/Regions"
  mkdir -p "${SIM_FOLDER}/maptiles"
  mkdir -p "${SIM_FOLDER}/DataSnapshot"
  mkdir -p "${SIM_FOLDER}/ScriptEngines"
  mkdir -p "${SIM_FOLDER}/assetcache"

  # sqlite
  if [ ${USE_MYSQL} == 0 ]; then
    mkdir -p "${SIM_FOLDER}/config-include/storage"
    add_file "/etc/ostmu/models/sims/config-include/storage/SQLiteStandalone.ini" "${SIM_FOLDER}/config-include/storage/SQLiteStandalone.ini"
  fi

  # change ownership
  chown -R "${USER_NAME}":"${USER_NAME}" "${SIM_FOLDER}"
  echo -e ${SymbolPlus} $"The folder ${SIM_FOLDER} was created."

else
  echo -e ${SymbolOk} $"The folder ${SIM_FOLDER} exists."
fi

# check if tmux user folder exists and if not, create it
tmux_user_folder="${TMUX_SOCKET_FOLDER}/${USER_NAME}"
if [ ! -d "${tmux_user_folder}" ];then
  mkdir -p "${tmux_user_folder}"
  if [ ! $? -eq 0 ]; then
    exit 1;
  else
    echo -e ${SymbolPlus} $"The tmux user folder was created."
  fi
else
  echo -e ${SymbolOk} $"The tmux user folder exists."
fi
chown ${USER_NAME}:${TMUX_SOCKET_FOLDER_GROUP_NAME} "${tmux_user_folder}"
if [ ! $? -eq 0 ]; then
  exit 1;
else
  echo -e ${SymbolPlus} $"The tmux user folder ownership was set."
fi
chmod 2770 "${tmux_user_folder}"
if [ ! $? -eq 0 ]; then
  exit 1;
else
  echo -e ${SymbolPlus} $"The tmux user folder permissions were set."
fi
